/*
    FDD low level functions.

    This file is part of Floppy Disk Ripper (FDR) program.
    Copyright (C) 2014, psb^hlw.

    FDR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FDR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
        NAME    fdd_asm(16)
        RSEG    CODE
        PUBLIC  fdd_init_lowl
        PUBLIC  fdd_capture_lowl
        PUBLIC  fdd_keep_alive_lowl

INDX_WAIT_DELAY equ 30000   ; 30k ~= 1 sec @ 14 mhz

; Passed struct, just for reference.
; struct FDD_t
; {
;   uint8_t drive;
;   uint8_t smprate;
;   uint8_t track,side;
;   uint8_t revs;
;   uint32_t *trklen;
; } FDD_parms;


; Enhanced FDD-Conf Ports
CPUFREQ         equ 0x20AF
PAGESLT3        equ 0x13AF
FDDVirt         equ 0x29AF
DMADAddrL       equ 0x1DAF
DMADAddrH       equ 0x1EAF
DMADAddrX       equ 0x1FAF
DMALen          equ 0x26AF
DMANum          equ 0x28AF
DMANumH         equ 0x2CAF
DMACtrl         equ 0x27AF
FRCtrl          equ 0x30AF
FRCnt0          equ 0x30AF
FRCnt1          equ 0x31AF
FRCnt2          equ 0x32AF
Border          equ 0x0FAF  ; used as dummy port
BordClr         equ 1       ; default dummy value

; Open access to BD ports and disable VDOS mounted disks
BDP_OPEN macro
        ld bc,FDDVirt
        ld a,128
        out (c),a
        endm
; Close access to BD ports
BDP_CLOSE macro
        ld bc,FDDVirt
        xor a
        out (c),a
        endm

; Setup DMA for storing ripped data at start of page 32, max length is 512kB
BDDMA_INIT macro
        ld bc,DMADAddrL
        xor a
        out (c),a
        ld b,high(DMADAddrH)
        out (c),a
        ld b,high(DMADAddrX)
        ld a,32  ; Page
        out (c),a
        ld b,high(DMALen)
        ld a,255 ; 256 words in burst
        out (c),a
        ld b,high(DMANum)
        ld a,255 ; 1024 bursts, low byte
        out (c), a
        ld b,high(DMANumH)
        ld a,3   ; 1024 bursts, high byte
        out (c), a
        ld b,high(DMACtrl)
        ld a,5   ; enable DMA for FDD Ripper
        out (c),a
        endm

; Read data counter
; Counter can be read on the fly starting from FRCnt0, reading FRCnt0 latches values into FRCnt1 and FRCnt2 automatically
; C:DE contains number of bytes transferred to DMA, notice that DMA stores only words, i.e. value 511 means that 255 words (510 bytes) are actually stored
        macro BDCNT_READ
        ld bc,FRCnt0
        in e,(c)
        ld b,high(FRCnt1)
        in d,(c)
        ld b,high(FRCnt2)
;         in l,(c)
        in a,(c)
        and 7
        ld c,a
        endm


; -----------------------------------------------------------------------------
; WD1773 ports/commands
; http://info-coach.fr/atari/documents/general/fd/WD177x-00.pdf

VG_CMD          equ 0x1F
VG_STAT         equ 0x1F
VG_TRK          equ 0x3F
VG_SECT         equ 0x5F
VG_DATA         equ 0x7F
VG_CTRL         equ 0xFF

CMD_RESTORE     equ 0x00        ; 0 0 0 0 G V F1 F2
CMD_SEEK        equ 0x10        ; 0 0 0 1 G V F1 F2
CMD_STEP        equ 0x20        ; 0 0 1 J G V F1 F2
CMD_STEP_F      equ 0x40        ; 0 1 0 J G V F1 F2
CMD_STEP_B      equ 0x60        ; 0 1 1 J G V F1 F2
CMD_READ_SEC    equ 0x80        ; 1 0 0 М S E C 0
CMD_WRITE_SEC   equ 0xA0        ; 1 0 1 М S E C А
CMD_READ_IAM    equ 0xC0        ; 1 1 0 0 0 E 0 0
CMD_READ_TRK    equ 0xE0        ; 1 1 1 0 0 E 0 0
CMD_WRITE_TRK   equ 0xF0        ; 1 1 1 1 0 E 0 0
CMD_INT         equ 0xD0        ; 1 1 0 1 m3 m2 m1 m0

MOD_G           equ 1<<3        ; head
MOD_V           equ 1<<2        ; check track
MOD_F00         equ 0<<0        ; step time 6ms
MOD_F01         equ 1<<0        ; step time 12ms
MOD_F10         equ 2<<0        ; step time 20ms
MOD_F11         equ 3<<0        ; step time 30ms
MOD_J           equ 1<<4        ; update track register (+/- 1)
MOD_E           equ 1<<2        ; 15 ms delay after HLD
MOD_S           equ 1<<3        ; side
MOD_M           equ 1<<4        ; multi-sector mode
MOD_C           equ 1<<1        ; check side
MOD_A           equ 1<<0        ; write (#F8), else write (#FB)


MODI_M0         equ 1<<0
MODI_M1         equ 1<<1
MODI_M2         equ 1<<2
MODI_M3         equ 1<<3

; -----------------------------------------------------------------------------


cmd_wait
        in a,(VG_CTRL)
        rlca
        jr nc,cmd_wait
        ret

cmd_restore
        ld a,CMD_RESTORE | MOD_G
        out (VG_CMD),a
        ret

cmd_int
        ld a,CMD_INT
        out (VG_CMD),a
        ret

;a=trk (0-80)
cmd_seek
        out (VG_DATA),a ;trk
        ld a,CMD_SEEK | MOD_G
        out (VG_CMD),a
        ret



;Wait IP and do out (c),l quick.
;bc=port, l=port_val
;ret: cy=1 - timeout, cy=0 - ok
wait_index
;         or a:ret
        ld h,0x02               ; index flag mask
        ld de,INDX_WAIT_DELAY   ; ~1sec @ 14 mhz
wi1
        rept 20
        in a,(VG_STAT)
        and h
        jr nz,indx_ok
        endr
        dec e
        jp nz,wi1
        dec d
        jp nz,wi1
        scf
        ret
indx_ok
        out (c),l
        ;cy=0
        ret


;Wait no-IP and do out (c),l quick.
;bc=port, l=port_val
;ret: cy=1 - timeout, cy=0 - ok
wait_noindex
;         or a:ret
        ld h,0x02               ; index flag mask
        ld de,INDX_WAIT_DELAY   ; ~1sec @ 14 mhz
wi2
        rept 20
        in a,(VG_STAT)
        and h
        jr z,indx_none
        endr
        dec e
        jp nz,wi2
        dec d
        jp nz,wi2
        scf
        ret
indx_none
        out (c),l
        ;cy=0
        ret


; -----------------------------------------------------------------------------
;; uint8_t fdd_init_lowl(struct FDD_t*, uint8_t dummy);
;de=addr of FDD_parms
;ret: a=res (0=ok, 1=no drive, 2=no_disk)
fdd_init_lowl
        BDP_OPEN
        ld a,(de)               ; get drive
        or 0x3c                 ; or mask
        out (VG_CTRL),a         ; out (#ff)
        ld (drive_ctrl),a       ; save drive mask
        dec a
        jr nz,$-1               ; some delay after FDC RESET release
        ld (drive_track),a      ; trk 0

        call cmd_int            ; interrupt cmd
        ld b,20
        djnz $                  ; 16+usec @14mhz

        call cmd_restore        ; restore cmd
        call cmd_wait           ; wait completion
        in a,(VG_STAT)
        and 0x10
        jr nz,no_drive          ; INDX00 active?

        ld bc,Border
        ld l,BordClr            ; dummy port/val
        call wait_noindex
        jr c,no_disk            ; wait index change
        call wait_index
        jr c,no_disk            ; wait index change
        xor a                   ; a=0 - ok
id_exit
        ex af,af'
        BDP_CLOSE
        ex af,af'
        ret

no_drive
        ld a,1                  ; a=1 - no drive
        jr id_exit
no_disk
        ld a,2                  ; a=2 - no disk
        jr id_exit





;; uint8_t fdd_capture_lowl(struct FDD_t*, uint8_t dummy);
;seek for spec'd track and capture it for spec'd revolutions.
;in: de=addr of FDD_parms
;ret: a=res (0=ok, 1=timeout)
fdd_capture_lowl
        exx
        push bc
        push de
        exx
        call fdd_capture_lowl_
        exx
        pop de
        pop bc
        exx
        ret
fdd_capture_lowl_
        BDP_OPEN                ; turn on betadisk ports
        ex de,hl
        inc hl
;        ld a,(hl)              ; get smprate
        inc hl
        ld a,(hl)               ; get trk
        inc hl
        ld (drive_track),a      ; store current track
        call cmd_seek           ; do seek
        call cmd_wait

        ld a,(drive_ctrl)
        ld e,a                  ; drive mask
        ld a,(hl)               ; get side
        inc hl
        add a,a
        add a,a
        add a,a
        add a,a                 ; <<4
        xor e
        out (VG_CTRL),a         ; set side

        ld b,(hl)               ; get revs
        inc hl
        ld a,(hl)
        inc hl
        ld h,(hl)
        ld l,a                  ; get trklens addr
        push bc
        exx

        BDDMA_INIT              ; init DMA

        ; to be sure we are not at index
        ld bc,Border
        ld l,BordClr
        call wait_noindex
        jr c,capt_timeout

        ; start capture on index
        ld bc,FRCtrl
        ld l,1                  ; start capture port/val
        call wait_index
        jr c,capt_timeout
        pop bc
capt_loop
        push bc
        ; wait no index
        ld bc,Border
        ld l,BordClr            ; dummy
        call wait_noindex
        jr c,capt_timeout2_

        ; capture index time
        ld bc,Border
        ld l,BordClr            ; dummy
        call wait_index
        jr c,capt_timeout2_

        exx
        ; get current captured length
        BDCNT_READ
        ld (hl),e
        inc hl
        ld (hl),d
        inc hl
        ld (hl),c
        inc hl
        ld (hl),0
        inc hl
        exx

        pop bc
        djnz capt_loop          ; next revolution

        ; stop on no index
        ld bc,FRCtrl
        ld l,0                  ; stop capture port/val
        call wait_noindex
        jr c,capt_timeout2

        exx
        ; get full captured length length
        BDCNT_READ
        res 0,e                 ; last length must be even
        ld (hl),e
        inc hl
        ld (hl),d
        inc hl
        ld (hl),c
        inc hl
        ld (hl),0
        inc hl
        exx
        xor a                   ; a=0 - ok
capt_ex
        ex af,af'
        BDP_CLOSE
        ex af,af'
        ret

capt_timeout
        pop bc
        ld a,1                  ; a=1 - timeout
        jr capt_ex

capt_timeout2_
        pop bc
capt_timeout2
        ld bc,FRCtrl            ; stop capturing
        xor a
        out (c),a
        inc a                   ; a=1 - timeout
        jr capt_ex



;; void fdd_keep_alive(void);
; seek the current track to keep motor on.
fdd_keep_alive_lowl
        push bc
        BDP_OPEN                ; turn on betadisk ports
        ld a,(drive_track)
        call cmd_seek           ; do seek
        call cmd_wait
        BDP_CLOSE
        pop bc
        ret

; -----------------------------------------------------------------------------

; vars
        RSEG    UDATA0

drive_ctrl defs 1               ; drive-dependent value for #FF port
drive_track defs 1              ; current track

        END
